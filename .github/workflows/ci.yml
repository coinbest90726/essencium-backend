name: Essencium CI

on:
  push:
  workflow_dispatch:

concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true

env:
  SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"

jobs:
  compile-main:
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      # - run: cat /home/runner/.m2/settings-security.xml # does not exist
      - run: cat /home/runner/.m2/settings.xml
      - run: mvn -f pom.xml compile
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend
          retention-days: 1
          path: "./essencium-backend/target/*"

  install-main:
    needs: compile-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - run: mvn -f pom.xml install -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend

  compile-identity-model:
    needs: install-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - run: mvn -f pom.xml compile
        working-directory: essencium-backend-identity-model
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend-identity-model
          retention-days: 1
          path: "./essencium-backend-identity-model/target/*"

  compile-sequence-model:
    needs: install-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - run: mvn -f pom.xml compile
        working-directory: essencium-backend-sequence-model
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend-sequence-model
          retention-days: 1
          path: "./essencium-backend-sequence-model/target/*"

  compile-uuid-model:
    needs: install-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - run: mvn -f pom.xml compile
        working-directory: essencium-backend-uuid-model
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend-uuid-model
          retention-days: 1
          path: "./essencium-backend-uuid-model/target/*"

  compile-development:
    needs:
      - compile-main
      - compile-identity-model
      - compile-sequence-model
      - compile-uuid-model
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-identity-model
          path: essencium-backend-identity-model/target/
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-sequence-model
          path: essencium-backend-sequence-model/target/
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-uuid-model
          path: essencium-backend-uuid-model/target/
      - run: mvn -f pom.xml compile
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend-development
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend-development
          retention-days: 1
          path: "./essencium-backend-development/target/*"

  unit-tests:
    needs: compile-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn '-Dskip.integration.tests' verify -Djacoco.destFile=exportJacoco/jacoco-unit.exec
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-tests-jacoco
          path: essencium-backend/exportJacoco/jacoco-unit.exec

  integration-tests:
    needs: compile-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn '-Dskip.unit.tests' verify -Djacoco.destFile=exportJacoco/jacoco-integration.exec
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-tests-jacoco
          path: essencium-backend/exportJacoco/jacoco-integration.exec

  merge-jacoco-report:
    name: Jacoco Merge Results
    needs:
      - unit-tests
      - integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: integration-tests-jacoco
          path: essencium-backend/target/
      - uses: actions/download-artifact@v3
        with:
          name: unit-tests-jacoco
          path: essencium-backend/target/
      - name: merge results
        run: |
          mvn jacoco:merge package jacoco:report -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests verify
        working-directory: essencium-backend
      - name: Upload jacoco coverage despite the check result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results-report
          path: essencium-backend/target/site/jacoco/
          if-no-files-found: error

  trivy-repo-scan:
    needs:
      - unit-tests
      - integration-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './essencium-backend'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,HIGH,CRITICAL'
          # trivy-config: trivy.yaml
      # Only available with GitHub Advanced Security
      #- name: Upload Trivy scan results to GitHub Security tab
      #  uses: github/codeql-action/upload-sarif@v3
      #  with:
      #    sarif_file: 'trivy-results.sarif'

  #  sonarqube:
  #    needs:
  #      - compile
  #      - unit-tests
  #      - integration-tests
  #    runs-on: ubuntu-latest
  #    container:
  #      image: maven:3-openjdk-17-slim
  #    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }} || ${{ github.event.pull_request.number }} == null
  #    timeout-minutes: 60
  #    env:
  #      MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
  #      GIT_DEPTH: 1000
  #    steps:
  #      - uses: actions/checkout@v3.5.0
  #        with:
  #          fetch-depth: 1000
  #      - uses: actions/cache@v3.3.1
  #        with:
  #          path: ".m2/repository"
  #          key: "${{ github.ref }}"
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: compile
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: unit-tests
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: integration-tests
  #      - run: cd ./essencium-backend
  #      - run: mvn sonar:sonar -D sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml,target/site/jacoco-it/jacoco.xml -D sonar.junit.reportPaths=target/surefire-reports,target/failsafe-reports -D sonar.tests=src/test,src/testIntegration -D sonar.branch.name=${{ github.ref }} -D sonar.qualitygate.wait=false

  #  sonarqube_merge_request:
  #    needs:
  #      - compile
  #      - unit-tests
  #      - integration-tests
  #    runs-on: ubuntu-latest
  #    container:
  #      image: maven:3-openjdk-17-slim
  #    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }} || ${{ github.event.pull_request.number }}
  #    timeout-minutes: 60
  #    env:
  #      MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
  #      GIT_DEPTH: 1000
  #    steps:
  #      - uses: actions/checkout@v3.5.0
  #        with:
  #          fetch-depth: 1000
  #      - uses: actions/cache@v3.3.1
  #        with:
  #          path: ".m2/repository"
  #          key: "${{ github.ref }}"
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: compile
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: unit-tests
  #      - uses: actions/download-artifact@v3.0.1
  #        with:
  #          name: integration-tests
  #      - run: cd ./essencium-backend
  #      - run: mvn sonar:sonar -D sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml,target/site/jacoco-it/jacoco.xml -D sonar.junit.reportPaths=target/surefire-reports,target/failsafe-reports -D sonar.tests=src/test,src/testIntegration -D sonar.pullrequest.key=${{ github.event.pull_request.number }} -D sonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} -D sonar.pullrequest.base=${{ github.event.pull_request.base.ref }} -D sonar.qualitygate.wait=false

  #  dep-track-backend:
  #    needs:
  #      - unit-tests
  #      - integration-tests
  #    runs-on: ubuntu-latest
  #    container:
  #      image: maven:3-openjdk-17-slim
  #    if: # Unable to map conditional expression to GitHub Actions equivalent
  #    #         ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }} || ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH
  #    timeout-minutes: 60
  #    env:
  #      MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/.m2/repository"
  #    steps:
  #      - uses: actions/checkout@v3.5.0
  #        with:
  #          fetch-depth: 50
  #      - uses: actions/cache@v3.3.1
  #        with:
  #          path: ".m2/repository"
  #          key: "${{ github.ref }}-mvn"
  #      - uses: actions/download-artifact@v3.0.1
  #      - run: cd ./essencium-backend
  #      - run: mvn cyclonedx:makeBom
  #      - run: |
  #          curl --location --request POST  "$DTRACK_API_HOST/api/v1/bom" \
  #          --header "X-API-Key: $DTRACK_API_TOKEN" \
  #          --form "autoCreate=\"true\"" \
  #          --form "projectName=essencium-backend-${{ github.repository }}" \
  #          --form "projectVersion=$VERSION" \
  #          --form "bom=@\"target/bom.json\""

  package-dev:
    needs:
      - integration-tests
      - unit-tests
      - compile-main
      - compile-identity-model
      - compile-sequence-model
      - compile-uuid-model
      - compile-development
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-identity-model
          path: essencium-backend-identity-model/target/
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-sequence-model
          path: essencium-backend-sequence-model/target/
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-uuid-model
          path: essencium-backend-uuid-model/target/
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-development
          path: essencium-backend-development/target/
      - run: mvn -f essencium-backend/pom.xml install -Dmaven.test.skip=true
      - run: mvn -f essencium-backend-sequence-model/pom.xml install -Dmaven.test.skip=true
      - run: mvn -f essencium-backend-development/pom.xml package -DskipTests
      - run: cd essencium-backend-development/target && java -Djarmode=layertools -jar *.jar extract
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend-development
          retention-days: 1
          path: essencium-backend-development/target/*

  docker-build-and-publish:
    needs: package-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set POM version env variable
        run: echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
        working-directory: essencium-backend-development
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-development
          path: essencium-backend-development/target/
      #      - name: show content of target folder
      #        run: ls -la essencium-backend-development/target/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      #- name: Login to Docker Hub
      #  uses: docker/login-action@v2
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./essencium-backend-development/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/frachtwerk/essencium-backend-development:latest
            ghcr.io/frachtwerk/essencium-backend-development:${{ env.POM_VERSION }}
      #      frachtwerk/essencium-backend-development:latest
      #      frachtwerk/essencium-backend-development:${{ env.RELEASE_VERSION }}

  deploy-main:
    needs:
      - integration-tests
      - unit-tests
      - compile-main
      - compile-identity-model
      - compile-sequence-model
      - compile-uuid-model
      - compile-development
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend
          path: essencium-backend/target/
      - name: Build with Maven
        run: mvn package -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests
        working-directory: essencium-backend
      #      - name: Publish to GitHub Packages Apache Maven
      #        run: mvn deploy
      #        env:
      #          GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
      - name: Publish to Apache Maven Central
        run: mvn deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend

  deploy-identity-model:
    needs:
      - integration-tests
      - unit-tests
      - compile-main
      - compile-identity-model
      - compile-sequence-model
      - compile-uuid-model
      - compile-development
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-identity-model
          path: essencium-backend-identity-model/target/
      - name: Build with Maven
        run: mvn package -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests
        working-directory: essencium-backend-identity-model
      #      - name: Publish to GitHub Packages Apache Maven
      #        run: mvn deploy
      #        env:
      #          GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
      - name: Publish to Apache Maven Central
        run: mvn deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend-identity-model

  deploy-sequence-model:
    needs:
      - integration-tests
      - unit-tests
      - compile-main
      - compile-identity-model
      - compile-sequence-model
      - compile-uuid-model
      - compile-development
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-sequence-model
          path: essencium-backend-sequence-model/target/
      - name: Build with Maven
        run: mvn package -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests
        working-directory: essencium-backend-sequence-model
      #      - name: Publish to GitHub Packages Apache Maven
      #        run: mvn deploy
      #        env:
      #          GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
      - name: Publish to Apache Maven Central
        run: mvn deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend-sequence-model

  deploy-uuid-model:
    needs:
      - integration-tests
      - unit-tests
      - compile-main
      - compile-identity-model
      - compile-sequence-model
      - compile-uuid-model
      - compile-development
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: essencium-backend-uuid-model
          path: essencium-backend-uuid-model/target/
      - name: Build with Maven
        run: mvn package -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests
        working-directory: essencium-backend-uuid-model
      #      - name: Publish to GitHub Packages Apache Maven
      #        run: mvn deploy
      #        env:
      #          GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ${{ secrets.MAVEN_USERNAME }} # env variable for username in deploy
          server-password: ${{ secrets.MAVEN_PASSWORD }} # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }} # env variable for GPG private key passphrase
      - name: Publish to Apache Maven Central
        run: mvn deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend-uuid-model

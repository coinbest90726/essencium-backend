name: Essencium CI - Dev

on:
  push:
    branches:
      - '*'
      - '!master'
      - '!main'

concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true

env:
  SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"

jobs:
  compile-main:
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn -f pom.xml compile
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: success()
        with:
          name: essencium-backend
          retention-days: 1
          path: "./essencium-backend/target/*"

  unit-tests:
    needs: compile-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn test jacoco:prepare-agent surefire:test jacoco:report -Dskip.integration.tests -Djacoco.destFile=exportJacoco/jacoco-unit.exec
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-tests-jacoco
          path: essencium-backend/exportJacoco/jacoco-unit.exec

  integration-tests:
    needs: compile-main
    runs-on: ubuntu-latest
    if: ${{ github.ref }} || ${{ github.ref }} == $CI_DEFAULT_BRANCH || ${{ github.event.pull_request.number }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - run: mvn test jacoco:prepare-agent-integration failsafe:integration-test jacoco:report-integration -Dskip.unit.tests -Djacoco.destFile=exportJacoco/jacoco-integration.exec
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        working-directory: essencium-backend
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-tests-jacoco
          path: essencium-backend/exportJacoco/jacoco-integration.exec

  merge-jacoco-report:
    name: Jacoco Merge Results
    needs:
      - unit-tests
      - integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'corretto'
          java-version: '17'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_PASSWORD # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
          cache: 'maven'
      - uses: actions/download-artifact@v3
        with:
          name: integration-tests-jacoco
          path: essencium-backend/target/
      - uses: actions/download-artifact@v3
        with:
          name: unit-tests-jacoco
          path: essencium-backend/target/
      - name: merge results
        run: mvn jacoco:merge package jacoco:report -DskipTests=true -Dskip.unit.tests -Dskip.integration.tests -Dmaven.source.skip verify -Dgpg.skip=true
        working-directory: essencium-backend
      - name: Upload jacoco coverage despite the check result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results-report
          path: essencium-backend/target/site/jacoco/
          if-no-files-found: error

  trivy-repo-scan:
    needs:
      - compile-main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './essencium-backend'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,HIGH,CRITICAL'
          # trivy-config: trivy.yaml
      # Only available with GitHub Advanced Security
      #- name: Upload Trivy scan results to GitHub Security tab
      #  uses: github/codeql-action/upload-sarif@v3
      #  with:
      #    sarif_file: 'trivy-results.sarif'

#  test-identity-model:
#  test-sequence-model:
#  test-uuid-model:
